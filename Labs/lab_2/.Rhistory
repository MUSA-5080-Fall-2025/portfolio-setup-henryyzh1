st_make_valid() %>%
st_sf()
hit <- st_intersects(phl_tracts_acs, accessible_area_union, sparse = FALSE)[,1]
phl_tract_access <- phl_tracts_acs %>%
mutate(accessible = hit)
phl_tract_summary <- phl_tract_access %>%
group_by(accessible) %>%
summarise(
total_pop = sum(total_popE, na.rm = TRUE),
elderly_pop = sum(pop65plusE, na.rm = TRUE),
disabled_pop = sum(disabled_popE, na.rm = TRUE)
)
ggplot() +
geom_sf(data = phl_tracts_acs, fill = "white", color = "grey", size = 0.5) +
geom_sf(data = polling, color = "red", size = 0.1) +
theme_void()
inaccessible_tracts <- phl_tract_access %>%
filter(accessible == FALSE)
ggplot() +
geom_sf(data = phl_tract_access, fill = "white", color = "grey", size = 0.5) +
geom_sf(data = inaccessible_tracts, fill = "red", color = "grey", size = 0.5) +
geom_sf(data = accessible_area_union, fill = "yellow", color = "grey", size = 0.5) +
theme_void()
phl_tract_summary <- phl_tract_access %>%
st_drop_geometry() %>%
group_by(accessible) %>%
summarise(
total_pop = sum(total_popE, na.rm = TRUE),
elderly_pop = sum(pop65plusE, na.rm = TRUE),
disabled_pop = sum(disabled_popE, na.rm = TRUE)
)
View(phl_tract_summary)
View(phl_tract_summary)
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read("data/hospitals.geojson")
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read("data/hospitals.geojson")
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read("data/hospitals.geojson")
getwd()
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read("data/hospitals.geojson")
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read("hospitals.geojson")
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read("data/hospitals.geojson")
# Get demographic data from ACS
pa_acs_vars <- c(
total_pop = "B01003_001",
median_income = "B19013_001",
age65_66_m = "B01001_020",
age67_69_m = "B01001_021",
age70_74_m = "B01001_022",
age75_79_m = "B01001_023",
age80_84_m = "B01001_024",
age85_over_m = "B01001_025",
age65_66_f = "B01001_044",
age67_69_f = "B01001_045",
age70_74_f = "B01001_046",
age75_79_f = "B01001_047",
age80_84_f = "B01001_048",
age85_over_f = "B01001_049"
)
pa_acs <- get_acs(
geography = "tract",
variables = pa_acs_vars,
state = "PA",
year = 2022,
survey = "acs5",
output = "wide"
)
pa_acs <- pa_acs %>%
mutate(pop65plusE = age65_66_mE + age67_69_mE + age70_74_mE + age75_79_mE + age80_84_mE + age85_over_mE + age65_66_fE + age67_69_fE + age70_74_fE + age75_79_fE + age80_84_fE + age85_over_fE)
# Join to tract boundaries
pa_tracts_acs <- pa_tracts %>%
left_join(
pa_acs %>%
select(GEOID, total_popE, median_incomeE, pop65plusE),
by = "GEOID"
)
sum(is.na(pa_tracts_acs$median_incomeE))
median(pa_tracts_acs$median_incomeE, na.rm = TRUE)
# Load your additional dataset
polling <- st_read("data/polling_places.geojson")
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read("data/hospitals.geojson")
getwd()
file.exists("data/hospitals.geojson")
list.files("data", pattern = "hospital", full.names = TRUE)
normalizePath("data/hospitals.geojson", mustWork = FALSE)
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
setwd("/Users/henryyang/Desktop/MasterStuff/CPLN5920/Code/portfolio-setup-henryyzh1/Labs/lab_2")
hospitals <- st_read("data/hospitals.geojson")
# Check that all data loaded correctly
st_crs(pa_counties)
st_crs(pa_tracts)
st_crs(hospitals)
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read("data/hospitals.geojson")
getwd()
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
library(here)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read(here("Labs", "lab_2", "data", "hospitals.geojson"))
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
library(here)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read(here("data", "hospitals.geojson"))
# Check that all data loaded correctly
st_crs(pa_counties)
st_crs(pa_tracts)
st_crs(hospitals)
# Load required packages
library(sf)
library(ggplot2)
library(knitr)
library(tidyverse)
library(tidycensus)
library(tigris)
library(here)
census_api_key("a429b978d14aa85d33761ac9dead46b91ad63915")
# Load spatial data
pa_counties <- counties(state = "PA", cb = TRUE)
pa_tracts <- tracts(state = "PA", cb = TRUE)
hospitals <- st_read(here("data", "hospitals.geojson"))
# Check that all data loaded correctly
st_crs(pa_counties)
st_crs(pa_tracts)
st_crs(hospitals)
# Get demographic data from ACS
pa_acs_vars <- c(
total_pop = "B01003_001",
median_income = "B19013_001",
age65_66_m = "B01001_020",
age67_69_m = "B01001_021",
age70_74_m = "B01001_022",
age75_79_m = "B01001_023",
age80_84_m = "B01001_024",
age85_over_m = "B01001_025",
age65_66_f = "B01001_044",
age67_69_f = "B01001_045",
age70_74_f = "B01001_046",
age75_79_f = "B01001_047",
age80_84_f = "B01001_048",
age85_over_f = "B01001_049"
)
pa_acs <- get_acs(
geography = "tract",
variables = pa_acs_vars,
state = "PA",
year = 2022,
survey = "acs5",
output = "wide"
)
pa_acs <- pa_acs %>%
mutate(pop65plusE = age65_66_mE + age67_69_mE + age70_74_mE + age75_79_mE + age80_84_mE + age85_over_mE + age65_66_fE + age67_69_fE + age70_74_fE + age75_79_fE + age80_84_fE + age85_over_fE)
# Join to tract boundaries
pa_tracts_acs <- pa_tracts %>%
left_join(
pa_acs %>%
select(GEOID, total_popE, median_incomeE, pop65plusE),
by = "GEOID"
)
sum(is.na(pa_tracts_acs$median_incomeE))
median(pa_tracts_acs$median_incomeE, na.rm = TRUE)
# Filter for vulnerable tracts based on your criteria
q1_income <- quantile(pa_tracts_acs$median_incomeE,
probs = 0.25, na.rm = TRUE)
income_thres <- 56000
elder_thres <- 0.20
pa_tracts_acs <- pa_tracts_acs %>%
mutate(
pct65plus = pop65plusE / total_popE
)
vulnerable_tracts <- pa_tracts_acs %>%
filter(
median_incomeE < income_thres,
pct65plus > elder_thres
)
n_vulnerable <- nrow(vulnerable_tracts)
n_total <- nrow(pa_tracts_acs)
pct_vulnerable <- round(100 * n_vulnerable / n_total, 1)
n_vulnerable; pct_vulnerable
# Transform to appropriate projected CRS
hospitals_proj <- st_transform(hospitals, 3365)
pa_tracts_proj <- st_transform(pa_tracts_acs, 3365)
# Calculate distance from each tract centroid to nearest hospital
vulnerable_tracts_proj <- pa_tracts_proj %>%
filter(median_incomeE < 56000, pop65plusE / total_popE > 0.2)
vulnerable_centroids <- st_centroid(vulnerable_tracts_proj)
dist_matrix <- st_distance(vulnerable_centroids, hospitals_proj)
nearest_ft <- apply(dist_matrix, 1, min)
nearest_mi <- as.numeric(nearest_ft) / 5280
vulnerable_tracts_proj <- vulnerable_tracts_proj %>%
mutate(nearest_hospital_dist = nearest_mi)
avg_dist <- round(mean(nearest_mi, na.rm = TRUE), 1)
max_dist <- round(max(nearest_mi, na.rm = TRUE), 1)
n_far <- sum(nearest_mi > 15, na.rm = TRUE)
avg_dist; max_dist; n_far
# Create underserved variable
vulnerable_tracts_proj <- vulnerable_tracts_proj %>%
mutate(underserved = nearest_hospital_dist > 15)
n_underserved <- sum(vulnerable_tracts_proj$underserved, na.rm = TRUE)
pct_underserved <- round(100 * n_underserved / n_vulnerable, 1)
n_underserved; pct_underserved
# Spatial join tracts to counties
# Aggregate statistics by county
pa_counties_proj <- st_transform(pa_counties, 3365)
vul_counties <- pa_counties_proj %>%
st_join(vulnerable_tracts_proj) %>%
group_by(GEOID = GEOID.x, Name = NAMELSAD.x) %>%
summarize(
n_vulnerable = n(),
n_underserved = sum(underserved, na.rm = TRUE),
pct_underserved = round(100 * n_underserved / n_vulnerable, 1),
avg_hospital_dist = mean(nearest_hospital_dist, na.rm = TRUE),
total_vul_pop = sum(total_popE, na.rm = TRUE)
)
top5_pct_underserved <- vul_counties %>%
ungroup() %>%
arrange(desc(pct_underserved)) %>%
slice(1:5)
top_vul_pop <- vul_counties %>%
ungroup() %>%
arrange(desc(total_vul_pop)) %>%
slice(1:1)
# Spatial join tracts to counties
# Aggregate statistics by county
pa_counties_proj <- st_transform(pa_counties, 3365)
vul_counties <- pa_counties_proj %>%
st_join(vulnerable_tracts_proj) %>%
group_by(GEOID = GEOID.x, Name = NAMELSAD.x) %>%
summarize(
n_vulnerable = n(),
n_underserved = sum(underserved, na.rm = TRUE),
pct_underserved = round(100 * n_underserved / n_vulnerable, 1),
avg_hospital_dist = mean(nearest_hospital_dist, na.rm = TRUE),
total_vul_pop = sum(total_popE, na.rm = TRUE)
)
top5_pct_underserved <- vul_counties %>%
ungroup() %>%
arrange(desc(pct_underserved)) %>%
slice(1:5)
top_vul_pop <- vul_counties %>%
ungroup() %>%
arrange(desc(total_vul_pop)) %>%
slice(1:1)
# Create and format priority counties table
priority_counties <- vul_counties %>%
st_drop_geometry() %>%
ungroup() %>%
filter(pct_underserved >= 20) %>%
arrange(desc(total_vul_pop)) %>%
slice(1:10)  %>%
select(
County = Name,
`# Vulnerable Tracts` = n_vulnerable,
`# Underserved Tracts` = n_underserved,
`% Underserved Tracts` = pct_underserved,
`Avg. Distance to Hospital (mi)` = avg_hospital_dist,
`Total Vulnerable Population` = total_vul_pop
)
kable(
priority_counties,
caption = "Top 10 PA Counties for Prioritized Healthcare Investment (by vulnerable population in tracts ≥20% underserved, >15 miles from hospitals)",
format.args = list(big.mark = ","),
digits = 1
)
# Create county-level access map
ggplot() +
geom_sf(data = vul_counties, aes(fill = pct_underserved), color = "white", size = 0.5) +
geom_sf(data = hospitals_proj, color = "lightblue", size = 0.5) +
scale_fill_viridis_c(option = "plasma", name = "% of Vulnerable Tracts Underserved") +
labs(
title = "Healthcare Access Challenges in Pennsylvania",
subtitle = "Blue points = Hospitals, Counties shaded by % vulnerable tracts >15 miles from nearest hospital",
caption = "Data: ACS 2022 5-year estimates, PA hospitals dataset"
) +
theme_void()
# Create detailed tract-level map
underserved_vul_tracts <- vulnerable_tracts_proj %>%
filter(underserved)
ggplot() +
geom_sf(data = pa_counties_proj, fill = "white", color = "grey", size = 0.5) +
geom_sf(data = hospitals_proj, color = "red", size = 0.5) +
geom_sf(data = underserved_vul_tracts, fill = "yellow", color = "grey", size = 0.5) +
labs(
title = "Healthcare Access Challenges in Pennsylvania",
subtitle = "Blue points = Hospitals, Counties shaded by % vulnerable tracts >15 miles from nearest hospital",
caption = "Data: ACS 2022 5-year estimates, PA hospitals dataset"
) +
theme_void()
# Create distribution visualization
ggplot(vulnerable_tracts_proj)+
aes(x = nearest_hospital_dist) +
geom_histogram(
binwidth = 1,
fill = "orange",
color = "white",
alpha = 0.7
) +
geom_vline(aes(xintercept = 15), color = "blue", linetype = "dashed", size = 1) +
labs(
title = "Distribution of Distances to Nearest Hospital for Vulnerable Tracts",
subtitle = "Dashed line indicates 15-mile underserved threshold",
x = "Distance to Nearest Hospital (miles)",
y = "Number of Vulnerable Tracts",
caption = "Data: ACS 2022 5-year, PA hospitals dataset"
) +
theme_minimal()
# Load your additional dataset
polling <- st_read("data/polling_places.geojson")
# Load your additional dataset
polling <- st_read(here("data", "polling_places.geojson"))
bus <- st_read(here("data", "septa_bus.geojson"))
metro <- st_read(here("data", "septa_metro.geojson"))
rail <- st_read(here("data", "septa_rail.geojson"))
trolley <- st_read(here("data", "septa_trolley.geojson"))
phl_tracts <- tracts(state = "PA", county = "Philadelphia", cb = TRUE)
phl_acs_vars <- c(
total_pop = "B01003_001",
age65_66_m = "B01001_020",
age67_69_m = "B01001_021",
age70_74_m = "B01001_022",
age75_79_m = "B01001_023",
age80_84_m = "B01001_024",
age85_over_m = "B01001_025",
age65_66_f = "B01001_044",
age67_69_f = "B01001_045",
age70_74_f = "B01001_046",
age75_79_f = "B01001_047",
age80_84_f = "B01001_048",
age85_over_f = "B01001_049",
total_disab = "C18108_001",
disabled_pop = "C18108_002"
)
phl_acs <- get_acs(
geography = "tract",
variables = phl_acs_vars,
state = "PA",
county = "Philadelphia",
year = 2022,
survey = "acs5",
output = "wide"
)
phl_acs <- phl_acs %>%
mutate(
pop65plusE = age65_66_mE + age67_69_mE + age70_74_mE + age75_79_mE +
age80_84_mE + age85_over_mE +
age65_66_fE + age67_69_fE + age70_74_fE + age75_79_fE +
age80_84_fE + age85_over_fE,
pct_elderly = 100 * pop65plusE / total_popE,
pct_disabled = 100 * disabled_popE / total_disabE
)
phl_tracts_acs <- phl_tracts %>%
left_join(phl_acs, by = "GEOID")
st_crs(polling)
st_crs(bus)
st_crs(metro)
st_crs(rail)
st_crs(trolley)
st_crs(phl_tracts_acs)
septa_stops <- bind_rows(
bus %>% mutate(mode = "Bus"),
metro %>% mutate(mode = "Metro"),
rail %>% mutate(mode = "Regional Rail"),
trolley %>% mutate(mode = "Trolley")
)
polling <- st_transform(polling, 3365)
septa_stops <- st_transform(septa_stops, 3365)
phl_tracts_acs <- st_transform(phl_tracts_acs, 3365)
nrow(polling)
nrow(septa_stops)
nrow(phl_tracts_acs)
# Your spatial analysis
polling_buf <- st_buffer(polling, dist = 1320)
stops_buf <- st_buffer(septa_stops, dist = 1320)
accessible_area <- st_intersection(polling_buf, stops_buf)
accessible_area_union <- accessible_area %>%
st_union() %>%
st_make_valid() %>%
st_sf()
hit <- st_intersects(phl_tracts_acs, accessible_area_union, sparse = FALSE)[,1]
phl_tract_access <- phl_tracts_acs %>%
mutate(accessible = hit)
phl_tract_summary <- phl_tract_access %>%
st_drop_geometry() %>%
group_by(accessible) %>%
summarise(
total_pop = sum(total_popE, na.rm = TRUE),
elderly_pop = sum(pop65plusE, na.rm = TRUE),
disabled_pop = sum(disabled_popE, na.rm = TRUE)
)
ggplot() +
geom_sf(data = phl_tracts_acs, fill = "white", color = "grey", size = 0.5) +
geom_sf(data = polling, color = "red", size = 0.1) +
theme_void()
inaccessible_tracts <- phl_tract_access %>%
filter(accessible == FALSE)
ggplot() +
geom_sf(data = phl_tract_access, fill = "white", color = "grey", size = 0.5) +
geom_sf(data = inaccessible_tracts, fill = "red", color = "grey", size = 0.5) +
geom_sf(data = accessible_area_union, fill = "yellow", color = "grey", size = 0.5) +
theme_void()
