# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Look at the tibble version (what we have)
car_data
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Use glimpse() to see the data structure
# Check the column names
# Look at the first few rows
head(car_data)
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
names(car_data)
# Look at the first few rows
head(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
?select
# Select just Model and Mileage columns
select(car_data, Model:Mileage)
# Select just Model and Mileage columns
select(car_data, Model&Mileage)
# Select just Model and Mileage columns
select(car_data, Model & Mileage)
# Select just Model and Mileage columns
select(car_data, Model:Mileage)
# Select just Model and Mileage columns
car_data %>%
select(Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_data %>%
select(Manufacturer, Price, Fuel type)
# Select Manufacturer, Price, and Fuel type
car_data %>%
select(Manufacturer, Price, `Fuel type`)
car_data %>%
select(-`Engine size`)
# Select just Model and Mileage columns
car_data %>%
select(Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_data %>%
select(Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
car_data %>%
select(-`Engine size`)
# Rename 'Year of manufacture' to year
car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Rename 'Year of manufacture' to year
car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Select just Model and Mileage columns
car_df %>%
select(Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_df %>%
select(Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
car_df %>%
select(-`Engine size`)
# Rename 'Year of manufacture' to year
car_df %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_df)
# Rename 'Year of manufacture' to year
car_df %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_df)
# Create an 'age' column (2025 minus year of manufacture)
car_df %>%
mutate(age = 2025-year)
# Rename 'Year of manufacture' to year
car_df %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_df)
# Rename 'Year of manufacture' to year
car_df %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_df)
# Rename 'Year of manufacture' to year
car_df %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_df)
# Rename 'Year of manufacture' to year
car_df <- car_df %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_df)
# Rename 'Year of manufacture' to year
car_df <- car_df %>%
rename(Year = `Year of manufacture`)
# Rename 'Year of manufacture' to year
car_df <- car_df %>%
rename(Year = `year`)
# Check that it worked
names(car_df)
# Create an 'age' column (2025 minus year of manufacture)
car_df <- car_df %>%
mutate(Age = 2025 - Year)
# Create a mileage_per_year column
car_df <- car_df %>%
mutate(mileage_per_year = Mileage / Age)
# Look at your new columns
select(car_data, Model, Year, Age, Mileage, Mileage_per_year)
# Rename 'Year of manufacture' to year
car_df <- car_df %>%
rename(Year = `Year of manufacture`)
# Check that it worked
names(car_df)
# Create an 'age' column (2025 minus year of manufacture)
car_df <- car_df %>%
mutate(Age = 2025 - Year)
# Create a mileage_per_year column
car_df <- car_df %>%
mutate(Mileage_per_year = Mileage / Age)
# Look at your new columns
select(car_data, Model, Year, Age, Mileage, Mileage_per_year)
# Create an 'age' column (2025 minus year of manufacture)
car_df <- car_df %>%
mutate(Age = 2025 - Year)
# Create a mileage_per_year column
car_df <- car_df %>%
mutate(Mileage_per_year = Mileage / Age)
# Look at your new columns
select(car_df, Model, Year, Age, Mileage, Mileage_per_year)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_df <- car_df %>%
mutate(Price_category = case_when(
price < 15000 ~ "budget",
price > 30000 ~ "mid-range",
TRUE, "midrange"
))
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_df <- car_df %>%
mutate(Price_category = case_when(
price < 15000 ~ "budget",
price > 30000 ~ "mid-range",
TRUE ~ "midrange"
))
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_df <- car_df %>%
mutate(Price_category = case_when(
Price < 15000 ~ "budget",
Price > 30000 ~ "mid-range",
TRUE ~ "midrange"
))
# Check your categories select the new column and show it
select(car_df, Price_category)
# Select just Model and Mileage columns
select(car_df, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_df, Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
select(car_df, -`Engine size`)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_df <- car_df %>%
mutate(Price_category = case_when(
Price < 15000 ~ "budget",
Price > 30000 ~ "mid-range",
TRUE ~ "midrange"
))
# Check your categories select the new column and show it
select(car_df, Model, Price_category)
# Find all Toyota cars
filter(car_df, Manufacturer = "Toyota")
# Find all Toyota cars
filter(car_df, Manufacturer == "Toyota")
# Find all Toyota cars
filter(car_df, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
filter(car_df, Mileage < 30000)
# Find luxury cars (from price category) with low mileage
filter(car_df, Price_category == "mid-rage", Mileage < 30000)
# Find luxury cars (from price category) with low mileage
filter(car_df, Price_category == "mid-rage", Mileage < 100000)
?filter
# Find luxury cars (from price category) with low mileage
filter(car_df, Price_category == "mid-rage" & Mileage < 30000)
# Find all Toyota cars
filter(car_df, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
filter(car_df, Mileage < 30000)
# Find luxury cars (from price category) with low mileage
filter(car_df, Price_category == "mid-range" & Mileage < 30000)
# Find all Toyota cars
filter(car_df, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
filter(car_df, Mileage < 30000)
# Find luxury cars (from price category) with low mileage
filter(car_df, Price_category == "mid-range", Mileage < 30000)
# Find luxury cars (from price category) with low mileage
filter(car_df, Price_category == "mid-range"& Mileage < 30000)
# Find all Toyota cars
filter(car_df, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
filter(car_df, Mileage < 30000)
# Find luxury cars (from price category) with low mileage
filter(car_df, Price_category == "mid-range", Mileage < 30000)
# Find cars that are EITHER Honda OR Nissan
filter(car_df, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars that are EITHER Honda OR Nissan
filter(car_df, Manufacturer == "Honda", Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
# Find diesel cars less than 10 years old
# Find cars that are EITHER Honda OR Nissan
filter(car_df, Manufacturer == "Honda" | Manufacturer == "Nissan")
View(car_data)
# Find cars that are EITHER Honda OR Nissan
filter(car_df, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
filter(car_df, Price > 20000, Price < 35000)
# Find diesel cars less than 10 years old
filter(car_df, `Fuel type` == "Diesel", Age < 10)
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
# Count cars by manufacturer
