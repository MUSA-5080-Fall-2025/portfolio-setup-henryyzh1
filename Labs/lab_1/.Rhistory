race_summary,
col.names = c("Unreliable Tracts", "# Tracts", "Average Population", "White %", "Black %", "Hispanic %"),
caption = "Comparison of Tracts by White Alone MOE Reliability",
digits = 1
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key(Sys.getenv("a429b978d14aa85d33761ac9dead46b91ad63915"), install = TRUE, overwrite = TRUE)
# Choose your state for analysis - assign it to a variable called my_state
state_choice <- "AK"
# Write your get_acs() code here
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
ak_demo <- get_acs(
geography = "county",
variables = c(
med_inc = "B19013_001",
tot_pop = "B01003_001"
),
state = "AK",
year = 2022,
output = "wide"
) %>%
mutate(county_name = str_remove(NAME, ", Alaska"))
# Display the first few rows
head(ak_demo)
# Calculate MOE percentage and reliability categories using mutate()
ct_reliability <- ak_demo %>%
mutate(
medinc_moe_pct = (med_incM / med_incE) * 100,
reliability_cat = case_when(
medinc_moe_pct < 5 ~ "High Confidence (<5%)",
medinc_moe_pct <= 10 ~ "Moderate Confidence (5~10%)",
TRUE ~ "Low Confidence (>10%)"
),
unreliable_flag = case_when(
medinc_moe_pct > 10 ~ "ðŸ”´"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
reliability_summary <- ct_reliability %>%
count(reliability_cat) %>%
mutate(pct = round(100 * n / sum(n), 1))
reliability_summary
# Create table of top 5 counties by MOE percentage
high_uncertainty <- ct_reliability %>%
arrange(desc(medinc_moe_pct)) %>%
slice(1:5) %>%
select(NAME, med_incE, med_incM, medinc_moe_pct, reliability_cat)
# Format as table with kable() - include appropriate column names and caption
kable(
high_uncertainty,
col.names = c("County", "Median Income", "Margin of Error", "MOE %", "Reliability"),
caption = "Top 5 Alaska Counties with Highest Median Income MOE Percentage",
format.args = list(big.mark = ","),
digits = 1
)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_ct <- ct_reliability %>%
filter(NAME %in% c("Anchorage Municipality, Alaska",
"Fairbanks North Star Borough, Alaska",
"North Slope Borough, Alaska")) %>%
select(NAME, tot_popE, med_incE, medinc_moe_pct, reliability_cat)
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
kable(
selected_ct,
col.names = c("County", "Total Population", "Median Income", "MOE %", "Reliability"),
caption = "Selected Alaska Counties with Highest Median Income MOE Percentage",
format.args = list(big.mark = ","),
digits = 1
)
# Define your race/ethnicity variables with descriptive names
races <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total = "B03002_001"
)
tract_code <- c("020", "090", "185")
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
tract_demo <- get_acs(
geography = "tract",
state = "AK",
county = tract_code,
year = 2022,
variables = races,
output = "wide"
)
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
# Add readable tract and county name columns using str_extract() or similar
tract_demo_pct <- tract_demo %>%
mutate(
pct_white = 100 * whiteE / totalE,
pct_black = 100 * blackE / totalE,
pct_hispanic = 100 * hispanicE / totalE,
tract_name = str_extract(NAME, "Census Tract [0-9.]+"),
county_name = NAME %>%
str_remove("Census Tract [0-9.]+; ") %>%
str_remove("; Alaska")
)
tract_demo
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
high_hispanic <- tract_demo_pct %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(tract_name, county_name, pct_hispanic, hispanicE, totalE)
high_hispanic
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
ct_avg_demo <- tract_demo_pct %>%
group_by(county_name) %>%
summarize(
n_tracts = n(),
avg_pct_white = mean(pct_white, na.rm = TRUE),
avg_pct_black = mean(pct_black, na.rm = TRUE),
avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE)
) %>%
arrange(desc(n_tracts))
# Create a nicely formatted table of your results using kable()
kable(
ct_avg_demo,
col.names = c("County", "# Tracts", "White %", "Black %", "Hispanic %"),
caption = "Average Racial/Ethnic Composition by County (Tract-Level Averages)",
digits = 1
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_reliability <- tract_demo %>%
mutate(
white_moe_pct = (whiteM / whiteE) * 100,
black_moe_pct = (blackM / blackE) * 100,
hispanic_moe_pct = (hispanicM / hispanicE) * 100,
unreliable_flag = case_when(
white_moe_pct > 15 | black_moe_pct > 15 | hispanic_moe_pct > 15 ~ "ðŸ”´"),
tract_name = str_extract(NAME, "Census Tract [0-9.]+"),
county_name = NAME %>%
str_remove("Census Tract [0-9.]+; ") %>%
str_remove("; Alaska")
)
# Create summary statistics showing how many tracts have data quality issues
ct_moe_summary <- tract_reliability %>%
group_by(county_name) %>%
summarize(
total_tracts = n(),
unreliable_tracts = sum(!is.na(unreliable_flag))
)
ct_moe_summary
# Group tracts by whether they have high MOE issues
## Since all of the tracts have high MOE issues, I will be only using high MOE of white only population for analysis.
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
race_summary <- tract_reliability %>%
mutate(high_white_moe = white_moe_pct > 15) %>%
group_by(high_white_moe) %>%
summarize(
n_tracts = n(),
avg_population = mean(totalE, na.rm = TRUE),
avg_pct_white = mean((whiteE / totalE)[is.finite(whiteE / totalE)], na.rm = TRUE) * 100,
avg_pct_black = mean((blackE / totalE)[is.finite(blackE / totalE)], na.rm = TRUE) * 100,
avg_pct_hisp = mean((hispanicE / totalE)[is.finite(hispanicE / totalE)], na.rm = TRUE) * 100
)
# Create a professional table showing the patterns
kable(
race_summary,
col.names = c("Unreliable Tracts", "# Tracts", "Average Population", "White %", "Black %", "Hispanic %"),
caption = "Comparison of Tracts by White Alone MOE Reliability",
digits = 1
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
ct_reliability_sum <- ct_reliability %>%
select(NAME, med_incE, medinc_moe_pct, reliability_cat)
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
ct_recommendation <- ct_reliability_sum %>%
mutate(
Recommendation = case_when(
reliability_cat == "High Confidence (<5%)" ~ "Safe for algorithmic decisions",
reliability_cat == "Moderate Confidence (5~10%)" ~ "Use with caution - monitor outcomes",
reliability_cat == "Low Confidence (>10%)" ~ "Requires manual review or additional data"
)
)
# Format as a professional table with kable()
kable(
ct_recommendation,
col.names = c("County", "Median Income", "MOE %", "Reliability", "Recommendation"),
caption = "Algorithm Implementation Framework by County for Alaska",
format.args = list(big.mark = ","),
digits = 1
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Choose your state for analysis - assign it to a variable called my_state
state_choice <- "AK"
# Write your get_acs() code here
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
ak_demo <- get_acs(
geography = "county",
variables = c(
med_inc = "B19013_001",
tot_pop = "B01003_001",
progree = FALSE
),
state = "AK",
year = 2022,
output = "wide"
) %>%
mutate(county_name = str_remove(NAME, ", Alaska"))
# Display the first few rows
head(ak_demo)
# Calculate MOE percentage and reliability categories using mutate()
ct_reliability <- ak_demo %>%
mutate(
medinc_moe_pct = (med_incM / med_incE) * 100,
reliability_cat = case_when(
medinc_moe_pct < 5 ~ "High Confidence (<5%)",
medinc_moe_pct <= 10 ~ "Moderate Confidence (5~10%)",
TRUE ~ "Low Confidence (>10%)"
),
unreliable_flag = case_when(
medinc_moe_pct > 10 ~ "ðŸ”´"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
reliability_summary <- ct_reliability %>%
count(reliability_cat) %>%
mutate(pct = round(100 * n / sum(n), 1))
reliability_summary
# Create table of top 5 counties by MOE percentage
high_uncertainty <- ct_reliability %>%
arrange(desc(medinc_moe_pct)) %>%
slice(1:5) %>%
select(NAME, med_incE, med_incM, medinc_moe_pct, reliability_cat)
# Format as table with kable() - include appropriate column names and caption
kable(
high_uncertainty,
col.names = c("County", "Median Income", "Margin of Error", "MOE %", "Reliability"),
caption = "Top 5 Alaska Counties with Highest Median Income MOE Percentage",
format.args = list(big.mark = ","),
digits = 1
)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_ct <- ct_reliability %>%
filter(NAME %in% c("Anchorage Municipality, Alaska",
"Fairbanks North Star Borough, Alaska",
"North Slope Borough, Alaska")) %>%
select(NAME, tot_popE, med_incE, medinc_moe_pct, reliability_cat)
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
kable(
selected_ct,
col.names = c("County", "Total Population", "Median Income", "MOE %", "Reliability"),
caption = "Selected Alaska Counties with Highest Median Income MOE Percentage",
format.args = list(big.mark = ","),
digits = 1
)
# Define your race/ethnicity variables with descriptive names
races <- c(
white = "B03002_003",
black = "B03002_004",
hispanic = "B03002_012",
total = "B03002_001"
)
tract_code <- c("020", "090", "185")
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
tract_demo <- get_acs(
geography = "tract",
state = "AK",
county = tract_code,
year = 2022,
variables = races,
output = "wide",
progree = FALSE
)
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
# Add readable tract and county name columns using str_extract() or similar
tract_demo_pct <- tract_demo %>%
mutate(
pct_white = 100 * whiteE / totalE,
pct_black = 100 * blackE / totalE,
pct_hispanic = 100 * hispanicE / totalE,
tract_name = str_extract(NAME, "Census Tract [0-9.]+"),
county_name = NAME %>%
str_remove("Census Tract [0-9.]+; ") %>%
str_remove("; Alaska")
)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
high_hispanic <- tract_demo_pct %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(tract_name, county_name, pct_hispanic, hispanicE, totalE)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
ct_avg_demo <- tract_demo_pct %>%
group_by(county_name) %>%
summarize(
n_tracts = n(),
avg_pct_white = mean(pct_white, na.rm = TRUE),
avg_pct_black = mean(pct_black, na.rm = TRUE),
avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE)
) %>%
arrange(desc(n_tracts))
# Create a nicely formatted table of your results using kable()
kable(
ct_avg_demo,
col.names = c("County", "# Tracts", "White %", "Black %", "Hispanic %"),
caption = "Average Racial/Ethnic Composition by County (Tract-Level Averages)",
digits = 1
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_reliability <- tract_demo %>%
mutate(
white_moe_pct = (whiteM / whiteE) * 100,
black_moe_pct = (blackM / blackE) * 100,
hispanic_moe_pct = (hispanicM / hispanicE) * 100,
unreliable_flag = case_when(
white_moe_pct > 15 | black_moe_pct > 15 | hispanic_moe_pct > 15 ~ "ðŸ”´"),
tract_name = str_extract(NAME, "Census Tract [0-9.]+"),
county_name = NAME %>%
str_remove("Census Tract [0-9.]+; ") %>%
str_remove("; Alaska")
)
# Create summary statistics showing how many tracts have data quality issues
ct_moe_summary <- tract_reliability %>%
group_by(county_name) %>%
summarize(
total_tracts = n(),
unreliable_tracts = sum(!is.na(unreliable_flag))
)
ct_moe_summary
# Group tracts by whether they have high MOE issues
## Since all of the tracts have high MOE issues, I will be only using high MOE of white only population for analysis.
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
race_summary <- tract_reliability %>%
mutate(high_white_moe = white_moe_pct > 15) %>%
group_by(high_white_moe) %>%
summarize(
n_tracts = n(),
avg_population = mean(totalE, na.rm = TRUE),
avg_pct_white = mean((whiteE / totalE)[is.finite(whiteE / totalE)], na.rm = TRUE) * 100,
avg_pct_black = mean((blackE / totalE)[is.finite(blackE / totalE)], na.rm = TRUE) * 100,
avg_pct_hisp = mean((hispanicE / totalE)[is.finite(hispanicE / totalE)], na.rm = TRUE) * 100
)
# Create a professional table showing the patterns
kable(
race_summary,
col.names = c("Unreliable Tracts", "# Tracts", "Average Population", "White %", "Black %", "Hispanic %"),
caption = "Comparison of Tracts by White Alone MOE Reliability",
digits = 1
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
ct_reliability_sum <- ct_reliability %>%
select(NAME, med_incE, medinc_moe_pct, reliability_cat)
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
ct_recommendation <- ct_reliability_sum %>%
mutate(
Recommendation = case_when(
reliability_cat == "High Confidence (<5%)" ~ "Safe for algorithmic decisions",
reliability_cat == "Moderate Confidence (5~10%)" ~ "Use with caution - monitor outcomes",
reliability_cat == "Low Confidence (>10%)" ~ "Requires manual review or additional data"
)
)
# Format as a professional table with kable()
kable(
ct_recommendation,
col.names = c("County", "Median Income", "MOE %", "Reliability", "Recommendation"),
caption = "Algorithm Implementation Framework by County for Alaska",
format.args = list(big.mark = ","),
digits = 1
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Choose your state for analysis - assign it to a variable called my_state
state_choice <- "AK"
knitr::opts_chunk$set(include = false)
knitr::opts_chunk$set(include = false)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Choose your state for analysis - assign it to a variable called my_state
state_choice <- "AK"
#| eval: false
#| include: true
# Set your Census API key
census_api_key(Sys.getenv("a429b978d14aa85d33761ac9dead46b91ad63915"), install = TRUE, overwrite = TRUE)
#| eval: false
#| echo: true
# Set your Census API key
census_api_key(Sys.getenv("a429b978d14aa85d33761ac9dead46b91ad63915"), install = TRUE, overwrite = TRUE)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Choose your state for analysis - assign it to a variable called my_state
state_choice <- "AK"
# Write your get_acs() code here
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
ak_demo <- get_acs(
geography = "county",
variables = c(
med_inc = "B19013_001",
tot_pop = "B01003_001",
progree = FALSE
),
state = "AK",
year = 2022,
output = "wide"
) %>%
mutate(county_name = str_remove(NAME, ", Alaska"))
# Display the first few rows
head(ak_demo)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Choose your state for analysis - assign it to a variable called my_state
state_choice <- "AK"
#| eval: false
#| echo: true
# Set your Census API key
census_api_key(Sys.getenv("a429b978d14aa85d33761ac9dead46b91ad63915"), install = TRUE, overwrite = TRUE)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Choose your state for analysis - assign it to a variable called my_state
state_choice <- "AK"
# Write your get_acs() code here
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
ak_demo <- get_acs(
geography = "county",
variables = c(
med_inc = "B19013_001",
tot_pop = "B01003_001",
progree = FALSE
),
state = "AK",
year = 2022,
output = "wide"
) %>%
mutate(county_name = str_remove(NAME, ", Alaska"))
# Display the first few rows
head(ak_demo)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Choose your state for analysis - assign it to a variable called my_state
state_choice <- "AK"
knitr::opts_chunk$set(include = false)
knitr::opts_chunk$set(include = FALSE)
# Set your Census API key
census_api_key(Sys.getenv("a429b978d14aa85d33761ac9dead46b91ad63915"), install = TRUE, overwrite = TRUE)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Choose your state for analysis - assign it to a variable called my_state
state_choice <- "AK"
# Write your get_acs() code here
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
ak_demo <- get_acs(
geography = "county",
variables = c(
med_inc = "B19013_001",
tot_pop = "B01003_001",
progree = FALSE
),
state = "AK",
year = 2022,
output = "wide"
) %>%
mutate(county_name = str_remove(NAME, ", Alaska"))
# Display the first few rows
head(ak_demo)
